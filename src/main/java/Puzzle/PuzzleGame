package Puzzle;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Random;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.*;


/**
 * Created by apopov on 10.04.2018.
 */

public class PuzzleGame extends JPanel{
    private final int side = 4;
    private final int numberTiles = side*side-1;
    private final Random rand = new Random();
    private final int []tiles= new int[numberTiles+1];
    private final int tileSize;
    private int blankPos;
    private final int margin;
    private boolean gameOver;
    private final int grideSize;



    private PuzzleGame() {
        final int dim = 800;
        margin = 80;
        tileSize = (dim - 2 * margin) / side;
        grideSize = tileSize * side;

        setPreferredSize(new Dimension(dim, dim + margin));
        setBackground(Color.WHITE);
        setForeground(new Color (0xA9A9A9));
        setFont(new Font("Kristen ITC", Font.BOLD, 90));

        gameOver = true;

        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (gameOver) {
                    newGame();
                } else {
                    int ex = e.getX() - margin;
                    int ey = e.getY() - margin;

                    if(ex<0 || ex > grideSize || ey < 0 || ey > grideSize){
                        return;
                    }
                    int c1 = ex/tileSize;
                    int r1 = ey/tileSize;
                    int c2 = blankPos % side;
                    int r2 =  blankPos /  side;
                    int klickPos =  r1 * side + c1;
                    int dir =0;
                    if (c1==c2 && Math.abs (r1-r2)> 0){
                        dir = (r1 - r2) > 0 ? side : -side;
                    }
                    else if (r1==r2 && Math.abs(c1-c2)>0){
                        dir = (c1 - c2) > 0 ? 1 : -1;
                    }
                    if(dir !=0){
                        do {
                            int newBlankPos =  blankPos + dir;
                            tiles[blankPos] =  tiles[newBlankPos];
                            blankPos= newBlankPos;
                        }
                        while(blankPos!=klickPos);
                        tiles[blankPos] = 0;
                    }
                    gameOver = isSolved();
                }
                repaint();
            }
        });
        newGame();
    }


    private void drawStartMessage(Graphics2D g){
        if(gameOver){
            g.setFont(getFont().deriveFont(Font.BOLD, 18));
            g.setColor(getForeground());
            String s= "click start";
            int x= (getWidth()- g.getFontMetrics().stringWidth(s))/2;
            int y = (getHeight()-margin);
            g.drawString(s,x,y);
        }
    }

    private boolean isSolved(){
        if(tiles[tiles.length -1]!=0){
            return false;
        }
        for (int i=numberTiles-1; i>=0; i--){
            if (tiles[i] != i+1){
                return false;
            }
        }
        return true;
    }

    private void drawGrid(Graphics2D g){
        for (int i=0; i<tiles.length; i++){
            int r = i/side;
            int c= i%side;
            int x = margin + c * tileSize;
            int y = margin + r * tileSize;

            if(tiles[i]==0){
                if(gameOver){
                    g.setColor(Color.GREEN);
                    drawCenterString(g, "s",x,y);
                }
                continue;
            }

            g.setColor(getForeground());
            g.fillRoundRect(x,y, tileSize, tileSize,25,25);
            g.setColor(new Color(0xC0C0C0));
            g.drawRoundRect(x,y,tileSize,tileSize,25,25);
            g.setColor(new Color ( 0x000000));
            drawCenterString(g, String.valueOf(tiles[i]), x,y);
        }
    }

    private void drawCenterString(Graphics2D g, String s, int x, int y){
        FontMetrics fm = g.getFontMetrics();
        int asc = fm.getAscent();
        int des = fm.getDescent();
        x = x +(tileSize-fm.stringWidth(s))/2;
        y = y+(asc + (tileSize- (asc+ des))/2);
        g.drawString(s,x,y);
    }

    public void paintComponent(Graphics gg){
        super.paintComponent(gg);
        Graphics2D g = (Graphics2D) gg;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        drawGrid(g);
        drawStartMessage(g);
    }

    private void shuffle(){
        int n= numberTiles;
        while(n>1){
            int r =rand.nextInt(n--);
            int tmp =  tiles[r];
            tiles[r]= tiles[n];
            tiles[n]=tmp;
        }
    }

    private void newGame(){
        do {
            reset();
            shuffle();
        }
        while(!isSolvable()) ;
        gameOver = false;
    }

    public void reset(){
        for(int i=0;i<tiles.length;i++){
            tiles[i]= (i+1)% tiles.length;
        }
        blankPos=tiles.length-1;
    }

    private boolean isSolvable(){
        int countInversion =0;
        for (int i=0 ; i<numberTiles; i++){
            for(int j=0; j<i; j++){
                if(tiles[j]> tiles[i]){
                    countInversion++;
                }
            }
        }
        return  countInversion%2==0;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(()-> {
            JFrame f = new JFrame();
            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            f.add(new PuzzleGame(), BorderLayout.CENTER);
            f.pack();
            f.setLocationRelativeTo(null);
            f.setVisible(true);

        });
    }
}
